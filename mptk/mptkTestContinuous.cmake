CMAKE_MINIMUM_REQUIRED(VERSION 2.8.4)

IF(WIN32)
	SET(CTEST_CMAKE_GENERATOR   "Visual Studio 9 2008")
	SET (CTEST_SOURCE_DIRECTORY "$ENV{USERPROFILE}/mptk_test-ci")
	SET (CTEST_BINARY_DIRECTORY "$ENV{USERPROFILE}/mptk_test_build-ci")
	SET (CTEST_INSTALL_DIR      "$ENV{USERPROFILE}/mptk_output-ci")
ELSE(WIN32)
	SET(CTEST_CMAKE_GENERATOR "Unix Makefiles")
	SET (CTEST_SOURCE_DIRECTORY "$ENV{HOME}/mptk_test-ci")
	SET (CTEST_BINARY_DIRECTORY "$ENV{HOME}/mptk_test_build-ci")
	SET (CTEST_INSTALL_DIR      "$ENV{HOME}/mptk_output-ci")
ENDIF(WIN32)

#SET(ENV{CC} "/home/tgautrai/local/gcc/gcc-old")
#SET(ENV{CXX} "/home/tgautrai/local/gcc/g++-old")


FIND_PROGRAM(CTEST_SVN_COMMAND NAMES svn)

if(NOT EXISTS "${CTEST_SOURCE_DIRECTORY}")
	SET (CTEST_SVN_CHECKOUT  "${CTEST_SVN_COMMAND} checkout --username anonsvn --password anonsvn https://scm.gforge.inria.fr/svn/mptk/trunk \"${CTEST_SOURCE_DIRECTORY}\"")
	SET (CTEST_CHECKOUT_COMMAND "${CTEST_SVN_CHECKOUT}")
endif(NOT EXISTS "${CTEST_SOURCE_DIRECTORY}")

site_name(CTEST_SITE)
set(CTEST_BUILD_NAME "${CMAKE_SYSTEM}_${CMAKE_HOST_SYSTEM_PROCESSOR}")



SET (CTEST_START_WITH_EMPTY_BINARY_DIRECTORY TRUE)

CTEST_START("Continuous")
CTEST_UPDATE(RETURN_VALUE res)
IF(res EQUAL -1) 
	RETURN()
ENDIF(res EQUAL -1)
##  run build and test for continuous integration model only if there was a new update
IF(res EQUAL 0)
	RETURN()
ENDIF(res EQUAL 0)

#CTEST_CONFIGURE(OPTIONS "-DBUILD_DEBUG:BOOL=OFF;-DDASH_TESTING:BOOL=ON;-DBUILD_COVERAGE:BOOL=ON")
#CTEST_CONFIGURE(OPTIONS "-DBUILD_DEBUG:BOOL=OFF;-DDASH_TESTING:BOOL=ON;-DBUILD_COVERAGE:BOOL=ON;-DCMAKE_INSTALL_PREFIX=${CTEST_INSTALL_DIR};-DCMAKE_CC_COMPILER=$ENV{CC};-DCMAKE_CXX_COMPILER=$ENV{CXX}")
CTEST_CONFIGURE(OPTIONS "-DBUILD_DEBUG:BOOL=OFF;-DDASH_TESTING:BOOL=ON;-DBUILD_COVERAGE:BOOL=ON;-DCMAKE_INSTALL_PREFIX=${CTEST_INSTALL_DIR}")
CTEST_BUILD()
CTEST_BUILD(TARGET install)

IF(UNIX)
	SET(ENV{LD_LIBRARY_PATH} "$ENV{LD_LIBRARY_PATH}:${CTEST_INSTALL_DIR}/lib")
ENDIF(UNIX)

CTEST_TEST()
if (WITH_COVERAGE AND CTEST_COVERAGE_COMMAND)
  ctest_coverage()
endif (WITH_COVERAGE AND CTEST_COVERAGE_COMMAND)
if (WITH_MEMCHECK AND CTEST_MEMORYCHECK_COMMAND)
  ctest_memcheck()
endif (WITH_MEMCHECK AND CTEST_MEMORYCHECK_COMMAND)
CTEST_SUBMIT()
